- Python is a high level programming language
- Has a dynamic type system
- Python community places a huge emphasis on readability
- Multi-paradigm programming language
- First release in 1991
- Python 2.0 released in 2000
- Python 3.0 released in 2008
- Python Philosophy:
  - Beautiful is better than ugly
  - Explicit is better than implicit
  - Simple is better than complex
  - Complex is better than complicated
  - Readability counts
- Designed to be highly extensible
  - Core language remains small and powerful
- PEP: Python Enhancement Proposal
- Emphasizes Fun
- Look at Django for Python web development
- pip install 3rd party libraries
- ipython is a robust interactive shell
- pypi - Pythone Package Index
- Python3 is not backwards compatible
- Default to Python3 when possible
- For whitespace Python prefers four spaces
- Never mix spaces and tabs
- Be consistent on consecutive lines
- Python scalar types:
  - int
  - float
  - NoneType
  - bool
- Any operation with an integer and a float is promoted to a float
- elif is Python's keyword for 'else if'
- str: strings
  - immutable
  - Unicode
  - Can use single or double quotes
- multi-line strings are delimited by 3 quotes  
- Python translates '\n' to the appropriate newline character for your system
- Raw strings ignore escape characters
  - Identified by starting string with a lowercase r
- You can access certain characters of a string by using brackets
- bytes: sequences of bytes
  - similar to strings
  - raw binary data
  - denoted by starting with a lowercase b
- To convert between str and bytes you need to know the proper encoding/decoding method
- list: sequences of objects
  - mutable
  - elements of lists can be heterogeneous
- dict: fundamental data structure in Python
  - maps keys to values
  - also known as maps or associative arrays
- for-loop: visit each item in an iterable series
- functions are defined with the 'def' keyword
- It is convention to have two blank lines between top-level functions
- docstrings: literal string which document functions, modules, and classes
  - must be the first statement in the blocks for these constructs
- Code should be clear enough where comments are not neccessarily needed
- Comments start with '#'
- return statements without a return value return None
- 'def' is a statement which binds code to a name
- sys.argv contains command line arguments
- Int's are immutable
- List's are mutable
- Function arguments are passed by object reference
- When defining function arguments, arguments with default values must come after arguments without default arguments
- 'def' is a statement executed at runtime
- Default arguments are evaluated when 'def' is executed
- Immutable default values don't cause problems
- Mutable default values can cause confusing effects
  - To avoid issues, try to always use immutable values for default arguments such as ints or strings
- Python will not generally perofrm implicit conversions between types
- Type declarations are unnecessary in Python
- Names can be rebound as necessary to objects of any type
- 4 types of scopes (narrowest to broadest):
  - Local -> Inside the current function
  - Enclosing -> Inside enclosing functions
  - Global -> At the top level of the module
  - Built-in -> In the special builtins module
- Scopes in Python do not correspond to source code blocks
  - ex. for loops do not introduce new nested scopes
- Use the 'global' keyword to look force use of module variable
- Everything is an object
- tuple: immutable sequences of arbitrary objects
  - two create a singel element use a trailing comma (ie. t = (9,))
- tuple unpacking: destructuring operation that unpacks data structures into named references
- Should use str.join() to join strings:
  - Concatenation with '+' resultes in temporaries
  - str.join() inserts a separator between a collection of strings
  - the separator is the string on which join is called
- range() signature
  - range(stop)
  - range(start, stop)
  - range(start, stop, step)
- range doesn't support keyword arguments
- lists allow negative indices:
  - the last element is indexed at -1
- to copy a list without copying the reference you can copy using the slice operator like this: s[:]
- list.index()
  - find the loation of an object in a list
  - returns the index of the first list element which is equal to the argument
- sort and reverse modify the list in place
- dictionary keys must be immutable and values may be mutable
- dict.items()
  - iterates over keys and values in tandem
  - yields a (key, value) tuple on each iteration
- when creating a set, duplicates are removed
- sets are iterable, but their order is arbitrary